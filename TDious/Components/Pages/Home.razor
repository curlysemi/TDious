@page "/"
@implements IDisposable

<div id="loader" class="loader-overlay" style="display: @(isLoading ? "flex" : "none");">
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
</div>

<div class="modal fade @(isModalVisible ? "show d-block" : "")" id="myModal" tabindex="-1" aria-labelledby="modalLabel" aria-hidden="@((!isModalVisible).ToString())" style="@(isModalVisible ? "display: block;" : "display: none;")">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalLabel">@currentTaskTitle</h5>
                <button type="button" class="btn-close" @onclick="HideModal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="currentTaskHours" class="form-label">Total Hours</label>
                    <input type="number" class="form-control" @bind="currentTaskHours" id="currentTaskHours" min="0" step="0.25" placeholder="0.00" @oninput="@(e => OnModalHoursChanged(e.Value?.ToString()))">
                </div>
                <div class="mb-3">
                    <label for="comment" class="form-label">Comment</label>
                    <textarea id="comment" class="form-control" @bind="currentTaskMessage" rows="5" placeholder="Did something..."></textarea>
                </div>
            </div>
            <div class="modal-footer d-flex justify-content-between align-items-center w-100">
                <span class="fw-bold text-primary">Total Hours Completed Will Be: @currentTask_newTotalHoursCompletedToday.ToString("0.##")</span>
                <div>
                    <button type="button" class="btn btn-secondary" @onclick="CancelUpdate">Close</button>
                    <button class="btn btn-primary" @onclick="UpdateTask">Update Task</button>
                </div>
            </div>
        </div>
    </div>
</div>

@if (isModalVisible)
{
    <div class="modal-backdrop fade show"></div>
}

<div class="container-fluid mt-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h1 class="h3 mb-0">Tasks</h1>
        <div class="d-flex">
            <button class="btn btn-primary" @onclick="Refresh">
                <i class="bi bi-arrow-clockwise"></i> Refresh
            </button>
            <button class="btn btn-secondary ms-2" @onclick="ResetCache">
                <i class="bi bi-arrow-clockwise"></i> Reset Cache
            </button>
        </div>
    </div>

    <div class="card shadow-sm">
        <div class="card-body">
            <div class="d-flex gap-2 align-items-center">
                <h5 class="mb-0">Total Hours Completed Today:</h5>
                <span class="fs-4 fw-bold text-primary">@totalHoursCompletedToday.ToString("0.##")</span>
            </div>
        </div>
    </div>
</div>

@if (devOpsTasks == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped">
        @if (enableCustomTimeTrackingLineItems && timeTrackingTask is not null)
        {
            <thead>
                <tr>
                    <th>
                        Time Tracking
                    </th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>
                        <table>
                            <tr>
                                <th></th>
                                <th>Issue Research</th>
                                <th>Meetings</th>
                                <th>Support</th>
                                <th>Item Review</th>
                                <th>Requirements</th>
                                <th>Infrastructure</th>
                                <th>Uncategorized</th>
                            </tr>
                            <tbody>
                                <tr>
                                    <td>
                                        <strong>Total:</strong>
                                        <br />
                                        <strong>Add:</strong>
                                    </td>
                                    <td>
                                        <input @bind="timeTrackingTask.TotalIssueResearchTime" type="number" min="0" class="form-control" @oninput="@(e => OnBucketHoursChanged(timeTrackingTask.ID, Constants.IssueResearchTime, "Issue Research Time", e.Value?.ToString(), isAdd: false))" step="0.25" placeholder="0.00">
                                        <input @bind="timeTrackingTask.AddIssueResearchTime" type="number" min="0" class="form-control" @oninput="@(e => OnBucketHoursChanged(timeTrackingTask.ID, Constants.IssueResearchTime, "Issue Research Time", e.Value?.ToString(), isAdd: true))" step="0.25" placeholder="0.00">
                                    </td>
                                    <td>
                                        <input @bind="timeTrackingTask.TotalMeetingsTime" type="number" min="0" class="form-control" @oninput="@(e => OnBucketHoursChanged(timeTrackingTask.ID, Constants.MeetingsTime, "Meetings Time", e.Value?.ToString(), isAdd: false))" step="0.25" placeholder="0.00">
                                        <input @bind="timeTrackingTask.AddMeetingsTime" type="number" min="0" class="form-control" @oninput="@(e => OnBucketHoursChanged(timeTrackingTask.ID, Constants.MeetingsTime, "Meetings Time", e.Value?.ToString(), isAdd: true))" step="0.25" placeholder="0.00">
                                    </td>
                                    <td>
                                        <input @bind="timeTrackingTask.TotalSupportTime" type="number" min="0" class="form-control" @oninput="@(e => OnBucketHoursChanged(timeTrackingTask.ID, Constants.SupportTime, "Support Time", e.Value?.ToString(), isAdd: false))" step="0.25" placeholder="0.00">
                                        <input @bind="timeTrackingTask.AddSupportTime" type="number" min="0" class="form-control" @oninput="@(e => OnBucketHoursChanged(timeTrackingTask.ID, Constants.SupportTime, "Support Time", e.Value?.ToString(), isAdd: true))" step="0.25" placeholder="0.00">
                                    </td>
                                    <td>
                                        <input @bind="timeTrackingTask.TotalItemReviewTime" type="number" min="0" class="form-control" @oninput="@(e => OnBucketHoursChanged(timeTrackingTask.ID, Constants.ItemReviewTime, "Item Review Time", e.Value?.ToString(), isAdd: false))" step="0.25" placeholder="0.00">
                                        <input @bind="timeTrackingTask.AddItemReviewTime" type="number" min="0" class="form-control" @oninput="@(e => OnBucketHoursChanged(timeTrackingTask.ID, Constants.ItemReviewTime, "Item Review Time", e.Value?.ToString(), isAdd: true))" step="0.25" placeholder="0.00">
                                    </td>
                                    <td>
                                        <input @bind="timeTrackingTask.TotalRequirementsTime" type="number" min="0" class="form-control" @oninput="@(e => OnBucketHoursChanged(timeTrackingTask.ID, Constants.RequirementsTime, "Requirements Time", e.Value?.ToString(), isAdd: false))" step="0.25" placeholder="0.00">
                                        <input @bind="timeTrackingTask.AddRequirementsTime" type="number" min="0" class="form-control" @oninput="@(e => OnBucketHoursChanged(timeTrackingTask.ID, Constants.RequirementsTime, "Requirements Time", e.Value?.ToString(), isAdd: true))" step="0.25" placeholder="0.00">
                                    </td>
                                    <td>
                                        <input @bind="timeTrackingTask.TotalInfrastructureTime" type="number" min="0" class="form-control" @oninput="@(e => OnBucketHoursChanged(timeTrackingTask.ID, Constants.InfrastructureTime, "Infrastructure Time", e.Value?.ToString(), isAdd: false))" step="0.25" placeholder="0.00">
                                        <input @bind="timeTrackingTask.AddInfrastructureTime" type="number" min="0" class="form-control" @oninput="@(e => OnBucketHoursChanged(timeTrackingTask.ID, Constants.InfrastructureTime, "Infrastructure Time", e.Value?.ToString(), isAdd: true))" step="0.25" placeholder="0.00">
                                    </td>
                                    <td>
                                        <input @bind="timeTrackingTask.TotalUncategorizedTime" type="number" min="0" class="form-control" @oninput="@(e => OnBucketHoursChanged(timeTrackingTask.ID, Constants.UncategorizedTime, "Uncategorized Time", e.Value?.ToString(), isAdd: false))" step="0.25" placeholder="0.00">
                                        <input @bind="timeTrackingTask.AddUncategorizedTime" type="number" min="0" class="form-control" @oninput="@(e => OnBucketHoursChanged(timeTrackingTask.ID, Constants.UncategorizedTime, "Uncategorized Time", e.Value?.ToString(), isAdd: true))" step="0.25" placeholder="0.00">
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </td>
                </tr>
            </tbody>
        }
    </table>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>Title</th>
                <th>State</th>
                <th>Total</th>
                <th>Add</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var task in devOpsTasks)
            {
                <tr>
                    <td>@task.ID</td>
                    <td>@task.Title</td>
                    <td>@task.State</td>
                    <td>
                        <input @bind="task.TotalHours" type="number" min="0" class="form-control" @oninput="@(e => OnHoursChanged(task.ID, e.Value?.ToString(), isAdd: false))" step="0.25" placeholder="0.00">
                    </td>
                    <td>
                        <input @bind="task.AddHours" type="number" min="0" class="form-control" @oninput="@(e => OnHoursChanged(task.ID, e.Value?.ToString(), isAdd: true))" step="0.25" placeholder="0.00">
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Inject] private TDious.Services.LifecycleService LifecycleService { get; set; } = default!;

    private bool enableComments = false;

    private bool isLoading = true;
    private bool isModalVisible = false;
    private bool isBucketModalVisible = false;

    private List<Core.DevOps.DevOpsTask> devOpsTasks = new();
    private Core.DevOps.DevOpsTask? timeTrackingTask = new();
    private double totalHoursCompletedToday;
    private Dictionary<long, CancellationTokenSource> DebounceTokens = new();

    private long currentTaskID;
    private string currentTaskTitle = string.Empty;
    private double currentTaskHours;
    private string currentBucketTaskKey;
    private double currentTask_newTotalHoursCompletedToday;
    private string currentTaskMessage = string.Empty;

    private async Task Refresh()
    {
        isLoading = true;
        (devOpsTasks, timeTrackingTask) = await Core.DevOps.DevOpsProvider.GetAllTasks();
        totalHoursCompletedToday = await Core.TDiousDataProvider.GetHoursCompletedToday(devOpsTasks, timeTrackingTask);
        isLoading = false;
    }

    private async Task ResetCache()
    {
        isLoading = true;
        (devOpsTasks, timeTrackingTask) = await Core.DevOps.DevOpsProvider.GetAllTasks();
        devOpsTasks = devOpsTasks ?? new List<Core.DevOps.DevOpsTask>();
        totalHoursCompletedToday = await Core.TDiousDataProvider.GetHoursCompletedToday(devOpsTasks, timeTrackingTask, resetCache: true);
        isLoading = false;
    }

    private bool enableCustomTimeTrackingLineItems;

    protected override async Task OnInitializedAsync()
    {
        LifecycleService.OnResume += HandleAppResumeAsync;

        var settings = await Core.TDiousDataProvider.GetSettings();
        if (settings != null)
        {
            enableComments = settings.EnableComments;
            enableCustomTimeTrackingLineItems = !string.IsNullOrWhiteSpace(settings.TrackingTitle);
        }
        await Refresh();
    }

    private async Task OnHoursChanged(long key, string? newValue, bool isAdd)
    {
        if (newValue is null)
        {
            return;
        }

        if (!double.TryParse(newValue, out double value))
        {
            return;
        }

        // Cancel any existing debounce for this key
        if (DebounceTokens.TryGetValue(key, out var existingToken))
        {
            existingToken.Cancel();
            existingToken.Dispose();
        }

        // Create a new debounce token
        var tokenSource = new CancellationTokenSource();
        DebounceTokens[key] = tokenSource;

        try
        {
            // Wait 3 seconds before saving
            await Task.Delay(3000, tokenSource.Token);
            currentTaskID = key;
            currentTaskHours = value;
            var thisTask = devOpsTasks.First(t => t.ID == key);
            if (isAdd)
            {
                currentTask_newTotalHoursCompletedToday = totalHoursCompletedToday + value;
                currentTaskHours = thisTask.TotalHoursBackup + value;
            }
            else
            {
                currentTask_newTotalHoursCompletedToday = totalHoursCompletedToday + (value - thisTask.TotalHoursBackup);
            }
            currentTaskTitle = thisTask.Title ?? "(No title)";
            if (enableComments)
            {
                ShowModal();
                StateHasChanged();
            }
            else
            {
                await UpdateTask();
            }
        }
        catch (TaskCanceledException)
        {
            // Ignore cancellations (new input came in)
        }
    }

    private async Task OnBucketHoursChanged(long id, string key, string display, string? newValue, bool isAdd)
    {
        if (timeTrackingTask is null)
        {
            return;
        }

        if (newValue is null)
        {
            return;
        }

        if (!double.TryParse(newValue, out double value))
        {
            return;
        }

        // Cancel any existing debounce for this key
        if (DebounceTokens.TryGetValue(id, out var existingToken))
        {
            existingToken.Cancel();
            existingToken.Dispose();
        }

        // Create a new debounce token
        var tokenSource = new CancellationTokenSource();
        DebounceTokens[id] = tokenSource;

        try
        {
            // Wait 3 seconds before saving
            await Task.Delay(3000, tokenSource.Token);
            currentTaskID = id;
            currentBucketTaskKey = key;
            currentTaskHours = value;

            void setCurrentTaskHours(double currentTotalHours)
            {
                if (isAdd)
                {
                    currentTask_newTotalHoursCompletedToday = totalHoursCompletedToday + value;
                    currentTaskHours = currentTotalHours + value;
                }
                else
                {
                    currentTask_newTotalHoursCompletedToday = totalHoursCompletedToday + (value - currentTotalHours);
                }
            }

            switch (key)
            {
                case Constants.IssueResearchTime:
                    setCurrentTaskHours(timeTrackingTask.TotalIssueResearchTimeBackup);
                    break;
                case Constants.MeetingsTime:
                    setCurrentTaskHours(timeTrackingTask.TotalMeetingsTimeBackup);
                    break;
                case Constants.SupportTime:
                    setCurrentTaskHours(timeTrackingTask.TotalSupportTimeBackup);
                    break;
                case Constants.ItemReviewTime:
                    setCurrentTaskHours(timeTrackingTask.TotalItemReviewTimeBackup);
                    break;
                case Constants.RequirementsTime:
                    setCurrentTaskHours(timeTrackingTask.TotalRequirementsTimeBackup);
                    break;
                case Constants.InfrastructureTime:
                    setCurrentTaskHours(timeTrackingTask.TotalInfrastructureTimeBackup);
                    break;
                default:
                case Constants.UncategorizedTime:
                    setCurrentTaskHours(timeTrackingTask.TotalUncategorizedTimeBackup);
                    break;
            }

            currentTaskTitle = display;
            if (enableComments)
            {
                ShowModal();
                StateHasChanged();
            }
            else
            {
                await UpdateTask();
            }
        }
        catch (TaskCanceledException)
        {
            // Ignore cancellations (new input came in)
        }
    }

    private void OnModalHoursChanged(string? newValue)
    {
        if (newValue is null) return;

        if (!double.TryParse(newValue, out double value))
        {
            return;
        }

        currentTask_newTotalHoursCompletedToday = currentTask_newTotalHoursCompletedToday + (value - currentTaskHours);
        StateHasChanged();
    }

    private void ShowModal()
    {
        isModalVisible = true;
    }

    private void HideModal()
    {
        isModalVisible = false;
        isBucketModalVisible = false;
    }

    private async Task CancelUpdate()
    {
        if (currentTaskID > 0)
        {
            currentTaskID = 0;
            currentTaskTitle = string.Empty;
            currentTaskHours = 0;
            currentTaskMessage = string.Empty;
            currentTask_newTotalHoursCompletedToday = 0;
            currentBucketTaskKey = string.Empty;
            await Refresh();
        }
        HideModal();
    }

    private async Task UpdateTask()
    {
        if (currentTaskID <= 0)
        {
            return;
        }

        isLoading = true;
        StateHasChanged();

        await Core.DevOps.DevOpsProvider.SaveCompletedHoursWithComment(currentTaskID, currentTaskHours, currentTaskMessage, currentBucketTaskKey);

        var thisTask = devOpsTasks.FirstOrDefault(t => t.ID == currentTaskID);
        if (thisTask != null)
        {
            thisTask.AddHours = 0;
            thisTask.TotalHours = currentTaskHours;
            // Update local state
            totalHoursCompletedToday = await Core.TDiousDataProvider.GetHoursCompletedToday(devOpsTasks, timeTrackingTask);
        }

        currentTaskID = 0;
        currentTaskTitle = string.Empty;
        currentTaskHours = 0;
        currentTaskMessage = string.Empty;
        currentTask_newTotalHoursCompletedToday = 0;
        HideModal();
        StateHasChanged();
        isLoading = false;
    }

    private async Task HandleAppResumeAsync()
    {
        await Refresh();
        StateHasChanged();
    }

    public void Dispose()
    {
        LifecycleService.OnResume -= HandleAppResumeAsync;
    }
}
