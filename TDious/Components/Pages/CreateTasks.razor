@page "/create-tasks"
@implements IDisposable

<div id="loader" class="loader-overlay" style="display: @(isLoading ? "flex" : "none");">
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
</div>

<div class="modal fade @(isModalVisible ? "show d-block" : "")" id="childModal" tabindex="-1" aria-labelledby="modalLabel" aria-hidden="@((!isModalVisible).ToString())" style="@(isModalVisible ? "display: block;" : "display: none;")">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalLabel">Create Child Work Item</h5>
                <button type="button" class="btn-close" @onclick="HideModal"></button>
            </div>
            <div class="modal-body">
                <p><strong>Parent:</strong> @selectedParent?.Title</p>
                <p><strong>Effort:</strong> @selectedParent?.Effort</p>

                <div class="mb-3">
                    <label for="estimatedHours" class="form-label">Estimated Hours Remaining</label>
                    <input id="estimatedHours" type="number" step="0.25" min="0" class="form-control" @bind="newChildHours" placeholder="0.00" />
                </div>
            </div>
            <div class="modal-footer d-flex justify-content-between align-items-center w-100">
                <span class="fw-bold text-secondary">This task will be assigned to you (@@me)</span>
                <div>
                    <button class="btn btn-secondary" @onclick="HideModal">Cancel</button>
                    <button class="btn btn-primary" @onclick="CreateChildWorkItemAsync">Create Child Item</button>
                </div>
            </div>
        </div>
    </div>
</div>
@if (isModalVisible)
{
    <div class="modal-backdrop fade show"></div>
}

<div class="container-fluid mt-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h1 class="h3 mb-0">Create Child Tasks</h1>
        <div class="d-flex">
            <button class="btn btn-primary" @onclick="Refresh">
                <i class="bi bi-arrow-clockwise"></i> Refresh
            </button>
        </div>
    </div>

    @if (parentItems == null || !parentItems.Any())
    {
        <p><em>No work items found.</em></p>
    }
    else
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Title</th>
                    <th>State</th>
                    <th>Effort</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in parentItems)
                {
                    <tr>
                        <td>@item.ID</td>
                        <td>@item.Title</td>
                        <td>@item.State</td>
                        <td>@item.Effort</td>
                        <td>
                            <button class="btn btn-sm btn-primary" @onclick="() => OpenCreateChildModal(item)">Create Child</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {
    private bool isLoading = true;
    private bool isModalVisible = false;
    private List<Core.DevOps.DevOpsTask> parentItems = new();
    private Core.DevOps.DevOpsTask? selectedParent;
    private double newChildHours;

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    private async Task Refresh()
    {
        isLoading = true;
        StateHasChanged();
        parentItems = await Core.DevOps.DevOpsProvider.GetParentWorkItems();
        isLoading = false;
        StateHasChanged();
    }

    private void OpenCreateChildModal(Core.DevOps.DevOpsTask item)
    {
        selectedParent = item;
        newChildHours = 0;
        isModalVisible = true;
    }

    private void HideModal()
    {
        isModalVisible = false;
        selectedParent = null;
        newChildHours = 0;
    }

    private async Task CreateChildWorkItemAsync()
    {
        if (selectedParent is null)
            return;

        isLoading = true;
        StateHasChanged();

        await Core.DevOps.DevOpsProvider.CreateChildTask(selectedParent.ID, newChildHours);

        HideModal();
        isLoading = false;
        await Refresh();
    }

    public void Dispose()
    {
        // cleanup if needed
    }
}
